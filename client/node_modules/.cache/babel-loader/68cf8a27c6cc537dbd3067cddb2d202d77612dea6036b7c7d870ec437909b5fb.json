{"ast":null,"code":"// D:/AlphaWizz/sports-ecommerce/client/src/services/categoryService.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/categories/';\n\n// Helper function to get the authorization token from local storage\nconst getAuthHeaders = () => {\n  const userToken = localStorage.getItem('userToken');\n  // Safely parse the token, which might be a stringified JSON string\n  const token = userToken ? JSON.parse(userToken) : null;\n  if (token) {\n    return {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n  }\n  return {};\n};\n\n/**\r\n * Fetches the nested tree of all categories. This is a public route.\r\n */\nconst getCategories = async () => {\n  const response = await axios.get(API_URL);\n  return response.data;\n};\n\n/**\r\n * Creates a new category. This is a protected admin route.\r\n * @param {object} categoryData - The data for the new category (e.g., { name, parent })\r\n */\nconst createCategory = async categoryData => {\n  const response = await axios.post(API_URL, categoryData, getAuthHeaders());\n  return response.data;\n};\n\n/**\r\n * Updates an existing category. This is a protected admin route.\r\n * @param {string} id - The ID of the category to update\r\n * @param {object} categoryData - The updated data for the category\r\n */\nconst updateCategory = async (id, categoryData) => {\n  const response = await axios.put(API_URL + id, categoryData, getAuthHeaders());\n  return response.data;\n};\n\n/**\r\n * Deletes a category by its ID. This is a protected admin route.\r\n * @param {string} id - The ID of the category to delete\r\n */\nconst deleteCategory = async id => {\n  const response = await axios.delete(API_URL + id, getAuthHeaders());\n  return response.data;\n};\nconst categoryService = {\n  getCategories,\n  createCategory,\n  updateCategory,\n  deleteCategory\n};\nexport default categoryService;","map":{"version":3,"names":["axios","API_URL","getAuthHeaders","userToken","localStorage","getItem","token","JSON","parse","headers","Authorization","getCategories","response","get","data","createCategory","categoryData","post","updateCategory","id","put","deleteCategory","delete","categoryService"],"sources":["D:/AlphaWizz/sports-ecommerce/client/src/services/categoryService.js"],"sourcesContent":["// D:/AlphaWizz/sports-ecommerce/client/src/services/categoryService.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/categories/';\r\n\r\n// Helper function to get the authorization token from local storage\r\nconst getAuthHeaders = () => {\r\n    const userToken = localStorage.getItem('userToken');\r\n    // Safely parse the token, which might be a stringified JSON string\r\n    const token = userToken ? JSON.parse(userToken) : null;\r\n\r\n    if (token) {\r\n        return { headers: { Authorization: `Bearer ${token}` } };\r\n    }\r\n    return {};\r\n};\r\n\r\n/**\r\n * Fetches the nested tree of all categories. This is a public route.\r\n */\r\nconst getCategories = async () => {\r\n    const response = await axios.get(API_URL);\r\n    return response.data;\r\n};\r\n\r\n/**\r\n * Creates a new category. This is a protected admin route.\r\n * @param {object} categoryData - The data for the new category (e.g., { name, parent })\r\n */\r\nconst createCategory = async (categoryData) => {\r\n    const response = await axios.post(API_URL, categoryData, getAuthHeaders());\r\n    return response.data;\r\n};\r\n\r\n/**\r\n * Updates an existing category. This is a protected admin route.\r\n * @param {string} id - The ID of the category to update\r\n * @param {object} categoryData - The updated data for the category\r\n */\r\nconst updateCategory = async (id, categoryData) => {\r\n    const response = await axios.put(API_URL + id, categoryData, getAuthHeaders());\r\n    return response.data;\r\n};\r\n\r\n/**\r\n * Deletes a category by its ID. This is a protected admin route.\r\n * @param {string} id - The ID of the category to delete\r\n */\r\nconst deleteCategory = async (id) => {\r\n    const response = await axios.delete(API_URL + id, getAuthHeaders());\r\n    return response.data;\r\n};\r\n\r\nconst categoryService = {\r\n    getCategories,\r\n    createCategory,\r\n    updateCategory,\r\n    deleteCategory,\r\n};\r\n\r\nexport default categoryService;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uCAAuC;;AAEvD;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACnD;EACA,MAAMC,KAAK,GAAGH,SAAS,GAAGI,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,GAAG,IAAI;EAEtD,IAAIG,KAAK,EAAE;IACP,OAAO;MAAEG,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUJ,KAAK;MAAG;IAAE,CAAC;EAC5D;EACA,OAAO,CAAC,CAAC;AACb,CAAC;;AAED;AACA;AACA;AACA,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;EAC9B,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACZ,OAAO,CAAC;EACzC,OAAOW,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,MAAOC,YAAY,IAAK;EAC3C,MAAMJ,QAAQ,GAAG,MAAMZ,KAAK,CAACiB,IAAI,CAAChB,OAAO,EAAEe,YAAY,EAAEd,cAAc,CAAC,CAAC,CAAC;EAC1E,OAAOU,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMI,cAAc,GAAG,MAAAA,CAAOC,EAAE,EAAEH,YAAY,KAAK;EAC/C,MAAMJ,QAAQ,GAAG,MAAMZ,KAAK,CAACoB,GAAG,CAACnB,OAAO,GAAGkB,EAAE,EAAEH,YAAY,EAAEd,cAAc,CAAC,CAAC,CAAC;EAC9E,OAAOU,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMO,cAAc,GAAG,MAAOF,EAAE,IAAK;EACjC,MAAMP,QAAQ,GAAG,MAAMZ,KAAK,CAACsB,MAAM,CAACrB,OAAO,GAAGkB,EAAE,EAAEjB,cAAc,CAAC,CAAC,CAAC;EACnE,OAAOU,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,MAAMS,eAAe,GAAG;EACpBZ,aAAa;EACbI,cAAc;EACdG,cAAc;EACdG;AACJ,CAAC;AAED,eAAeE,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}