{"ast":null,"code":"var _jsxFileName = \"D:\\\\AlphaWizz\\\\sports-ecommerce\\\\client\\\\src\\\\routes\\\\AdminRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminRoute = () => {\n  _s();\n  // Get all three states from the context\n  const {\n    isAuthenticated,\n    isAdmin,\n    loading\n  } = useAuth();\n\n  // 1. First, check if we are still loading the user's status\n  if (loading) {\n    // If we are, show a simple loading message and wait.\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  }\n\n  // 2. After loading is false, we can safely check authentication\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  }\n\n  // 3. And then we can check for the admin role\n  if (!isAdmin) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-red-600\",\n        children: \"Access Denied\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4\",\n        children: \"You do not have permission to view this page.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  }\n\n  // If all checks pass, render the admin page\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n};\n_s(AdminRoute, \"WBNX2TM0OEPsoxNZ/5RgCQC/3sM=\", false, function () {\n  return [useAuth];\n});\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","useAuth","jsxDEV","_jsxDEV","AdminRoute","_s","isAuthenticated","isAdmin","loading","children","fileName","_jsxFileName","lineNumber","columnNumber","to","className","_c","$RefreshReg$"],"sources":["D:/AlphaWizz/sports-ecommerce/client/src/routes/AdminRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst AdminRoute = () => {\r\n    // Get all three states from the context\r\n    const { isAuthenticated, isAdmin, loading } = useAuth();\r\n\r\n    // 1. First, check if we are still loading the user's status\r\n    if (loading) {\r\n        // If we are, show a simple loading message and wait.\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    // 2. After loading is false, we can safely check authentication\r\n    if (!isAuthenticated) {\r\n        return <Navigate to=\"/login\" />;\r\n    }\r\n\r\n    // 3. And then we can check for the admin role\r\n    if (!isAdmin) {\r\n        return (\r\n            <div className=\"text-center mt-20\">\r\n                <h1 className=\"text-3xl font-bold text-red-600\">Access Denied</h1>\r\n                <p className=\"mt-4\">You do not have permission to view this page.</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // If all checks pass, render the admin page\r\n    return <Outlet />;\r\n};\r\n\r\nexport default AdminRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA,MAAM;IAAEC,eAAe;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGP,OAAO,CAAC,CAAC;;EAEvD;EACA,IAAIO,OAAO,EAAE;IACT;IACA,oBAAOL,OAAA;MAAAM,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;;EAEA;EACA,IAAI,CAACP,eAAe,EAAE;IAClB,oBAAOH,OAAA,CAACJ,QAAQ;MAACe,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnC;;EAEA;EACA,IAAI,CAACN,OAAO,EAAE;IACV,oBACIJ,OAAA;MAAKY,SAAS,EAAC,mBAAmB;MAAAN,QAAA,gBAC9BN,OAAA;QAAIY,SAAS,EAAC,iCAAiC;QAAAN,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClEV,OAAA;QAAGY,SAAS,EAAC,MAAM;QAAAN,QAAA,EAAC;MAA6C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC;EAEd;;EAEA;EACA,oBAAOV,OAAA,CAACH,MAAM;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB,CAAC;AAACR,EAAA,CA3BID,UAAU;EAAA,QAEkCH,OAAO;AAAA;AAAAe,EAAA,GAFnDZ,UAAU;AA6BhB,eAAeA,UAAU;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}