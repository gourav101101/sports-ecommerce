{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/categories/';\n\n// --- THIS IS THE CRITICAL FIX ---\n// The actual, working function that was missing. It gets the security\n// token from localStorage and prepares the authorization header.\nconst getAuthHeaders = () => {\n  // 1. Get the token from browser's local storage\n  const tokenString = localStorage.getItem('userToken');\n\n  // 2. The token is stored as a JSON string (e.g., \"\\\"eyJ...\\\"\"), so it needs to be parsed.\n  if (tokenString) {\n    const token = JSON.parse(tokenString);\n    // 3. Return the header object that axios needs\n    return {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n  }\n\n  // 4. If no token exists, return an empty object.\n  return {};\n};\n\n// --- These functions will now work correctly ---\n// They call getAuthHeaders() to attach the security token to each request.\nconst createCategory = categoryData => {\n  return axios.post(API_URL, categoryData, getAuthHeaders());\n};\nconst updateCategory = (id, categoryData) => {\n  return axios.put(API_URL + id, categoryData, getAuthHeaders());\n};\nconst deleteCategory = id => {\n  return axios.delete(API_URL + id, getAuthHeaders());\n};\nconst categoryService = {\n  createCategory,\n  updateCategory,\n  deleteCategory\n};\nexport default categoryService;","map":{"version":3,"names":["axios","API_URL","getAuthHeaders","tokenString","localStorage","getItem","token","JSON","parse","headers","Authorization","createCategory","categoryData","post","updateCategory","id","put","deleteCategory","delete","categoryService"],"sources":["D:/AlphaWizz/sports-ecommerce/client/src/services/categoryService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = '/api/categories/';\r\n\r\n// --- THIS IS THE CRITICAL FIX ---\r\n// The actual, working function that was missing. It gets the security\r\n// token from localStorage and prepares the authorization header.\r\nconst getAuthHeaders = () => {\r\n    // 1. Get the token from browser's local storage\r\n    const tokenString = localStorage.getItem('userToken');\r\n\r\n    // 2. The token is stored as a JSON string (e.g., \"\\\"eyJ...\\\"\"), so it needs to be parsed.\r\n    if (tokenString) {\r\n        const token = JSON.parse(tokenString);\r\n        // 3. Return the header object that axios needs\r\n        return {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        };\r\n    }\r\n\r\n    // 4. If no token exists, return an empty object.\r\n    return {};\r\n};\r\n\r\n// --- These functions will now work correctly ---\r\n// They call getAuthHeaders() to attach the security token to each request.\r\nconst createCategory = (categoryData) => {\r\n    return axios.post(API_URL, categoryData, getAuthHeaders());\r\n};\r\n\r\nconst updateCategory = (id, categoryData) => {\r\n    return axios.put(API_URL + id, categoryData, getAuthHeaders());\r\n};\r\n\r\nconst deleteCategory = (id) => {\r\n    return axios.delete(API_URL + id, getAuthHeaders());\r\n};\r\n\r\nconst categoryService = {\r\n    createCategory,\r\n    updateCategory,\r\n    deleteCategory,\r\n};\r\n\r\nexport default categoryService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kBAAkB;;AAElC;AACA;AACA;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;;EAErD;EACA,IAAIF,WAAW,EAAE;IACb,MAAMG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;IACrC;IACA,OAAO;MACHM,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CAAC;EACL;;EAEA;EACA,OAAO,CAAC,CAAC;AACb,CAAC;;AAED;AACA;AACA,MAAMK,cAAc,GAAIC,YAAY,IAAK;EACrC,OAAOZ,KAAK,CAACa,IAAI,CAACZ,OAAO,EAAEW,YAAY,EAAEV,cAAc,CAAC,CAAC,CAAC;AAC9D,CAAC;AAED,MAAMY,cAAc,GAAGA,CAACC,EAAE,EAAEH,YAAY,KAAK;EACzC,OAAOZ,KAAK,CAACgB,GAAG,CAACf,OAAO,GAAGc,EAAE,EAAEH,YAAY,EAAEV,cAAc,CAAC,CAAC,CAAC;AAClE,CAAC;AAED,MAAMe,cAAc,GAAIF,EAAE,IAAK;EAC3B,OAAOf,KAAK,CAACkB,MAAM,CAACjB,OAAO,GAAGc,EAAE,EAAEb,cAAc,CAAC,CAAC,CAAC;AACvD,CAAC;AAED,MAAMiB,eAAe,GAAG;EACpBR,cAAc;EACdG,cAAc;EACdG;AACJ,CAAC;AAED,eAAeE,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}